import streamlit as st
from PyPDF2 import PdfReader
from langchain.text_splitter import RecursiveCharacterTextSplitter
import os
import re
from langchain_google_genai import GoogleGenerativeAIEmbeddings
import google.generativeai as genai
from langchain_community.vectorstores import FAISS
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.chains.question_answering import load_qa_chain
from langchain.prompts import PromptTemplate
import traceback

# Ki·ªÉm tra v√† c·∫•u h√¨nh API key
api_key = os.getenv("GOOGLE_API_KEY")
if not api_key:
    st.error("GOOGLE_API_KEY kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y trong bi·∫øn m√¥i tr∆∞·ªùng. Vui l√≤ng c·∫•u h√¨nh API key.")

# C·∫•u h√¨nh API key n·∫øu c√≥
if api_key:
    genai.configure(api_key=api_key)

# H√†m ƒë·ªÉ tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ PDF
def get_pdf_text(pdf_docs):
    text = ""
    for pdf in pdf_docs:
        try:
            pdf_reader = PdfReader(pdf)
            for page in pdf_reader.pages:
                page_text = page.extract_text()
                if page_text:  # Ki·ªÉm tra n·∫øu vƒÉn b·∫£n ƒë∆∞·ª£c tr√≠ch xu·∫•t
                    text += page_text
        except Exception as e:
            st.error(f"L·ªói khi ƒë·ªçc file {pdf.name}: {str(e)}")
    return text

# H√†m ƒë·ªÉ chia nh·ªè vƒÉn b·∫£n
def get_text_chunks(text):
    if not text.strip():
        raise ValueError("Kh√¥ng c√≥ n·ªôi dung vƒÉn b·∫£n ƒë∆∞·ª£c tr√≠ch xu·∫•t t·ª´ PDF")
        
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=10000, chunk_overlap=1000)
    chunks = text_splitter.split_text(text)
    if not chunks:
        raise ValueError("Kh√¥ng th·ªÉ chia nh·ªè vƒÉn b·∫£n th√†nh c√°c ƒëo·∫°n")
    return chunks

# H√†m ƒë·ªÉ t·∫°o vector store
def get_vector_store(text_chunks):
    if not api_key:
        raise ValueError("API key ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh")
        
    embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")
    vector_store = FAISS.from_texts(text_chunks, embedding=embeddings)
    vector_store.save_local("faiss_index")
    return True

# H√†m ƒë·ªÉ t·∫°o chu·ªói h·ªôi tho·∫°i
def get_conversational_chain():
    prompt_template = """
    B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh v√† th√¢n thi·ªán, gi√∫p tr·∫£ l·ªùi c√¢u h·ªèi d·ª±a tr√™n th√¥ng tin t·ª´ t√†i li·ªáu PDF.
    H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát r√µ r√†ng, d·ªÖ hi·ªÉu v√† th√¢n thi·ªán.
    N·∫øu kh√¥ng bi·∫øt c√¢u tr·∫£ l·ªùi, h√£y th√†nh th·∫≠t n√≥i r·∫±ng b·∫°n kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë√≥ trong t√†i li·ªáu.
    
    Ng·ªØ c·∫£nh:\n {context}\n
    C√¢u h·ªèi: \n{question}\n
    C√¢u tr·∫£ l·ªùi:
    """
    try:
        model = ChatGoogleGenerativeAI(model="gemini-1.5-pro", temperature=0.3)
        prompt = PromptTemplate(template=prompt_template, input_variables=["context", "question"])
        chain = load_qa_chain(model, chain_type="stuff", prompt=prompt)
        return chain
    except Exception as e:
        st.error(f"L·ªói khi t·∫°o chu·ªói h·ªôi tho·∫°i: {str(e)}")
        raise

# H√†m ki·ªÉm tra xem vector store ƒë√£ ƒë∆∞·ª£c t·∫°o ch∆∞a
def is_vector_store_ready():
    return os.path.exists("faiss_index")

# H√†m x·ª≠ l√Ω ƒë·∫ßu v√†o c·ªßa ng∆∞·ªùi d√πng
def user_input(user_question):
    if not is_vector_store_ready():
        return "Vui l√≤ng t·∫£i l√™n v√† x·ª≠ l√Ω t√†i li·ªáu PDF tr∆∞·ªõc khi ƒë·∫∑t c√¢u h·ªèi!"
    
    try:
        embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")
        new_db = FAISS.load_local("faiss_index", embeddings, allow_dangerous_deserialization=True)
        docs = new_db.similarity_search(user_question)
        
        if not docs:
            return "Kh√¥ng t√¨m th·∫•y th√¥ng tin li√™n quan trong t√†i li·ªáu. Vui l√≤ng th·ª≠ c√¢u h·ªèi kh√°c ho·∫∑c t·∫£i l√™n t√†i li·ªáu c√≥ th√¥ng tin li√™n quan."
        
        chain = get_conversational_chain()
        response = chain(
            {"input_documents": docs, "question": user_question},
            return_only_outputs=True
        )
        
        return response["output_text"]
    except Exception as e:
        st.error(f"L·ªói chi ti·∫øt: {traceback.format_exc()}")
        return f"Xin l·ªói, ƒë√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n: {str(e)}"

def main():
    st.set_page_config(page_title="Tr·ª£ l√Ω t√†i li·ªáu PDF", page_icon="üìö")
    
    # T·∫°o ti√™u ƒë·ªÅ v√† hi·ªáu ·ª©ng
    st.markdown("""
    <h1 style='text-align: center; color: #1E88E5;'>Tr·ª£ l√Ω T√†i Li·ªáu PDF üìö</h1>
    <p style='text-align: center; font-size: 18px;'>T·∫£i l√™n t√†i li·ªáu PDF v√† ƒë·∫∑t c√¢u h·ªèi b·∫±ng ti·∫øng Vi·ªát</p>
    """, unsafe_allow_html=True)
    
    # Kh·ªüi t·∫°o c√°c bi·∫øn session state
    if "processed_files" not in st.session_state:
        st.session_state.processed_files = False
    
    if "messages" not in st.session_state:
        st.session_state.messages = []
    
    # T·∫°o sidebar
    with st.sidebar:
        st.markdown("<h2 style='text-align: center;'>T·∫£i l√™n t√†i li·ªáu</h2>", unsafe_allow_html=True)
        pdf_docs = st.file_uploader("T·∫£i l√™n t√†i li·ªáu PDF c·ªßa b·∫°n", accept_multiple_files=True, type=["pdf"])
        
        if st.button("X·ª≠ l√Ω t√†i li·ªáu"):
            if not pdf_docs:
                st.error("Vui l√≤ng t·∫£i l√™n √≠t nh·∫•t m·ªôt t√†i li·ªáu PDF!")
            else:
                with st.spinner("ƒêang x·ª≠ l√Ω t√†i li·ªáu..."):
                    try:
                        # Reset tr·∫°ng th√°i x·ª≠ l√Ω
                        st.session_state.processed_files = False
                        
                        # X·ª≠ l√Ω t√†i li·ªáu
                        raw_text = get_pdf_text(pdf_docs)
                        if not raw_text.strip():
                            st.error("Kh√¥ng th·ªÉ tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ c√°c t√†i li·ªáu PDF ƒë√£ t·∫£i l√™n. Vui l√≤ng ki·ªÉm tra l·∫°i t√†i li·ªáu.")
                        else:
                            text_chunks = get_text_chunks(raw_text)
                            success = get_vector_store(text_chunks)
                            if success:
                                st.session_state.processed_files = True
                                st.success(f"Ho√†n th√†nh! ƒê√£ x·ª≠ l√Ω {len(pdf_docs)} t√†i li·ªáu PDF. B·∫°n c√≥ th·ªÉ ƒë·∫∑t c√¢u h·ªèi ngay b√¢y gi·ªù.")
                    except Exception as e:
                        st.error(f"L·ªói khi x·ª≠ l√Ω t√†i li·ªáu: {str(e)}")
        
        # Hi·ªÉn th·ªã tr·∫°ng th√°i x·ª≠ l√Ω
        if st.session_state.processed_files:
            st.success("T√†i li·ªáu ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω v√† s·∫µn s√†ng ƒë·ªÉ truy v·∫•n.")
        
        st.markdown("---")
        st.markdown("""
        <div style='text-align: center;'>
            <p>Tr·ª£ l√Ω s·ª≠ d·ª•ng m√¥ h√¨nh Gemini 1.5 Pro</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Th√™m n√∫t x√≥a l·ªãch s·ª≠ chat
        if st.button("X√≥a l·ªãch s·ª≠ chat"):
            st.session_state.messages = []
            st.success("ƒê√£ x√≥a l·ªãch s·ª≠ chat!")
    
    # Hi·ªÉn th·ªã l·ªãch s·ª≠ chat b·∫±ng st.chat_message
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
    
    # S·ª≠ d·ª•ng st.chat_input
    user_question = st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n ·ªü ƒë√¢y...")
    
    if user_question:
        # Hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng
        with st.chat_message("user"):
            st.markdown(user_question)
        
        # Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠
        st.session_state.messages.append({"role": "user", "content": user_question})
        
        # Ki·ªÉm tra v√† x·ª≠ l√Ω c√¢u h·ªèi
        with st.chat_message("assistant"):
            if not st.session_state.processed_files and not is_vector_store_ready():
                response = "Vui l√≤ng t·∫£i l√™n v√† x·ª≠ l√Ω t√†i li·ªáu PDF tr∆∞·ªõc khi ƒë·∫∑t c√¢u h·ªèi!"
                st.warning(response)
            else:
                with st.spinner("ƒêang t√¨m c√¢u tr·∫£ l·ªùi..."):
                    response = user_input(user_question)
                    st.markdown(response)
            
            # Th√™m c√¢u tr·∫£ l·ªùi v√†o l·ªãch s·ª≠
            st.session_state.messages.append({"role": "assistant", "content": response})

if __name__ == "__main__":
    main()
