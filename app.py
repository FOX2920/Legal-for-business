import streamlit as st
from PyPDF2 import PdfReader
from langchain.text_splitter import RecursiveCharacterTextSplitter
import os
from langchain_google_genai import GoogleGenerativeAIEmbeddings
import google.generativeai as genai
from langchain_community.vectorstores import FAISS
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.chains.question_answering import load_qa_chain
from langchain.prompts import PromptTemplate

# C·∫•u h√¨nh API key
api_key = os.getenv("GOOGLE_API_KEY")
genai.configure(api_key=api_key)

# H√†m ƒë·ªÉ tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ PDF
def get_pdf_text(pdf_docs):
    text = ""
    for pdf in pdf_docs:
        pdf_reader = PdfReader(pdf)
        for page in pdf_reader.pages:
            text += page.extract_text()
    return text

# H√†m ƒë·ªÉ chia nh·ªè vƒÉn b·∫£n
def get_text_chunks(text):
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=10000, chunk_overlap=1000)
    chunks = text_splitter.split_text(text)
    return chunks

# H√†m ƒë·ªÉ t·∫°o vector store
def get_vector_store(text_chunks):
    embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")
    vector_store = FAISS.from_texts(text_chunks, embedding=embeddings)
    vector_store.save_local("faiss_index")

# H√†m ƒë·ªÉ t·∫°o chu·ªói h·ªôi tho·∫°i
def get_conversational_chain():
    prompt_template = """
    B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh v√† th√¢n thi·ªán, gi√∫p tr·∫£ l·ªùi c√¢u h·ªèi d·ª±a tr√™n th√¥ng tin t·ª´ t√†i li·ªáu PDF.
    H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát r√µ r√†ng, d·ªÖ hi·ªÉu v√† th√¢n thi·ªán.
    N·∫øu kh√¥ng bi·∫øt c√¢u tr·∫£ l·ªùi, h√£y th√†nh th·∫≠t n√≥i r·∫±ng b·∫°n kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë√≥ trong t√†i li·ªáu.
    
    Ng·ªØ c·∫£nh:\n {context}\n
    C√¢u h·ªèi: \n{question}\n
    C√¢u tr·∫£ l·ªùi:
    """
    model = ChatGoogleGenerativeAI(model="gemini-1.5-pro", temperature=0.3)
    prompt = PromptTemplate(template=prompt_template, input_variables=["context", "question"])
    chain = load_qa_chain(model, chain_type="stuff", prompt=prompt)
    return chain

# H√†m x·ª≠ l√Ω ƒë·∫ßu v√†o c·ªßa ng∆∞·ªùi d√πng
def process_user_input(user_question):
    try:
        embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")
        new_db = FAISS.load_local("faiss_index", embeddings, allow_dangerous_deserialization=True)
        docs = new_db.similarity_search(user_question)
        
        chain = get_conversational_chain()
        
        # T·∫°o generator ƒë·ªÉ m√¥ ph·ªèng streaming
        def response_generator():
            response = chain(
                {"input_documents": docs, "question": user_question},
                return_only_outputs=True
            )
            return response["output_text"]
        
        return response_generator()
    except Exception as e:
        return f"Xin l·ªói, ƒë√£ x·∫£y ra l·ªói: {str(e)}"

def main():
    st.set_page_config(page_title="Tr·ª£ l√Ω PDF Chat", page_icon="üìö")
    
    # T·∫°o layout v·ªõi sidebar v√† khu v·ª±c chat ch√≠nh
    with st.sidebar:
        st.title("Tr·ª£ l√Ω PDF Chat üìö")
        st.markdown("---")
        
        # T·∫£i l√™n t√†i li·ªáu
        pdf_docs = st.file_uploader("T·∫£i l√™n t√†i li·ªáu PDF", accept_multiple_files=True, type=["pdf"])
        
        if st.button("X·ª≠ l√Ω t√†i li·ªáu"):
            if not pdf_docs:
                st.error("Vui l√≤ng t·∫£i l√™n √≠t nh·∫•t m·ªôt t√†i li·ªáu PDF!")
            else:
                with st.spinner("ƒêang x·ª≠ l√Ω t√†i li·ªáu..."):
                    # X·ª≠ l√Ω t√†i li·ªáu
                    raw_text = get_pdf_text(pdf_docs)
                    text_chunks = get_text_chunks(raw_text)
                    get_vector_store(text_chunks)
                    st.session_state.pdf_processed = True
                    st.success("Ho√†n th√†nh! B·∫°n c√≥ th·ªÉ ƒë·∫∑t c√¢u h·ªèi ngay b√¢y gi·ªù.")
        
        st.markdown("---")
        st.caption("ƒê∆∞·ª£c h·ªó tr·ª£ b·ªüi Gemini 1.5 Pro")
    
    # Khu v·ª±c chat ch√≠nh
    st.title("Chat v·ªõi T√†i li·ªáu PDF")
    
    # Kh·ªüi t·∫°o l·ªãch s·ª≠ chat trong session state n·∫øu ch∆∞a c√≥
    if "messages" not in st.session_state:
        st.session_state.messages = []
    
    if "pdf_processed" not in st.session_state:
        st.session_state.pdf_processed = False
    
    # Hi·ªÉn th·ªã t·∫•t c·∫£ tin nh·∫Øn t·ª´ l·ªãch s·ª≠
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
    
    # X·ª≠ l√Ω ƒë·∫ßu v√†o t·ª´ ng∆∞·ªùi d√πng
    if prompt := st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."):
        if not st.session_state.pdf_processed:
            st.error("Vui l√≤ng t·∫£i l√™n v√† x·ª≠ l√Ω t√†i li·ªáu PDF tr∆∞·ªõc khi ƒë·∫∑t c√¢u h·ªèi!")
            return
        
        # Hi·ªÉn th·ªã tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
        with st.chat_message("user"):
            st.markdown(prompt)
        
        # Th√™m tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠
        st.session_state.messages.append({"role": "user", "content": prompt})
        
        # X·ª≠ l√Ω c√¢u h·ªèi v√† hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi
        with st.chat_message("assistant"):
            try:
                with st.spinner("ƒêang t√¨m c√¢u tr·∫£ l·ªùi..."):
                    response = process_user_input(prompt)
                    st.markdown(response)
                    
                    # Th√™m c√¢u tr·∫£ l·ªùi v√†o l·ªãch s·ª≠
                    st.session_state.messages.append({"role": "assistant", "content": response})
            except Exception as e:
                error_message = f"ƒê√£ x·∫£y ra l·ªói: {str(e)}"
                st.error(error_message)
                # Th√™m th√¥ng b√°o l·ªói v√†o l·ªãch s·ª≠
                st.session_state.messages.append({"role": "assistant", "content": error_message})

if __name__ == "__main__":
    main()
