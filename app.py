import streamlit as st
from PyPDF2 import PdfReader
from langchain.text_splitter import RecursiveCharacterTextSplitter
import os
from langchain_google_genai import GoogleGenerativeAIEmbeddings
import google.generativeai as genai
from langchain_community.vectorstores import FAISS
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.chains.question_answering import load_qa_chain
from langchain.prompts import PromptTemplate
from dotenv import load_dotenv

# T·∫£i bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
load_dotenv()

# C·∫•u h√¨nh API key
api_key = os.getenv("GOOGLE_API_KEY")
genai.configure(api_key=api_key)

# H√†m ƒë·ªÉ tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ PDF
def get_pdf_text(pdf_docs):
    text = ""
    for pdf in pdf_docs:
        pdf_reader = PdfReader(pdf)
        for page in pdf_reader.pages:
            text += page.extract_text()
    return text

# H√†m ƒë·ªÉ chia nh·ªè vƒÉn b·∫£n
def get_text_chunks(text):
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=10000, chunk_overlap=1000)
    chunks = text_splitter.split_text(text)
    return chunks

# H√†m ƒë·ªÉ t·∫°o vector store
def get_vector_store(text_chunks):
    embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")
    vector_store = FAISS.from_texts(text_chunks, embedding=embeddings)
    vector_store.save_local("faiss_index")

# H√†m ƒë·ªÉ t·∫°o chu·ªói h·ªôi tho·∫°i
def get_conversational_chain():
    prompt_template = """
    B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh v√† th√¢n thi·ªán, gi√∫p tr·∫£ l·ªùi c√¢u h·ªèi d·ª±a tr√™n th√¥ng tin t·ª´ t√†i li·ªáu PDF.
    H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát r√µ r√†ng, d·ªÖ hi·ªÉu v√† th√¢n thi·ªán.
    N·∫øu kh√¥ng bi·∫øt c√¢u tr·∫£ l·ªùi, h√£y th√†nh th·∫≠t n√≥i r·∫±ng b·∫°n kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë√≥ trong t√†i li·ªáu.
    
    Ng·ªØ c·∫£nh:\n {context}\n
    C√¢u h·ªèi: \n{question}\n
    C√¢u tr·∫£ l·ªùi:
    """
    model = ChatGoogleGenerativeAI(model="gemini-1.5-pro", temperature=0.3)
    prompt = PromptTemplate(template=prompt_template, input_variables=["context", "question"])
    chain = load_qa_chain(model, chain_type="stuff", prompt=prompt)
    return chain

# H√†m x·ª≠ l√Ω ƒë·∫ßu v√†o c·ªßa ng∆∞·ªùi d√πng
def user_input(user_question):
    try:
        embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")
        new_db = FAISS.load_local("faiss_index", embeddings, allow_dangerous_deserialization=True)
        docs = new_db.similarity_search(user_question)
        
        chain = get_conversational_chain()
        response = chain(
            {"input_documents": docs, "question": user_question},
            return_only_outputs=True
        )
        
        return response["output_text"]
    except Exception as e:
        return f"Xin l·ªói, ƒë√£ x·∫£y ra l·ªói: {str(e)}"

def main():
    st.set_page_config(page_title="Tr·ª£ l√Ω t√†i li·ªáu PDF", page_icon="üìö")
    
    # T·∫°o ti√™u ƒë·ªÅ v√† hi·ªáu ·ª©ng
    st.markdown("""
    <h1 style='text-align: center; color: #1E88E5;'>Tr·ª£ l√Ω T√†i Li·ªáu PDF üìö</h1>
    <p style='text-align: center; font-size: 18px;'>T·∫£i l√™n t√†i li·ªáu PDF v√† ƒë·∫∑t c√¢u h·ªèi b·∫±ng ti·∫øng Vi·ªát</p>
    """, unsafe_allow_html=True)
    
    # T·∫°o sidebar
    with st.sidebar:
        st.markdown("<h2 style='text-align: center;'>T·∫£i l√™n t√†i li·ªáu</h2>", unsafe_allow_html=True)
        pdf_docs = st.file_uploader("T·∫£i l√™n t√†i li·ªáu PDF c·ªßa b·∫°n", accept_multiple_files=True, type=["pdf"])
        
        if st.button("X·ª≠ l√Ω t√†i li·ªáu"):
            if not pdf_docs:
                st.error("Vui l√≤ng t·∫£i l√™n √≠t nh·∫•t m·ªôt t√†i li·ªáu PDF!")
            else:
                with st.spinner("ƒêang x·ª≠ l√Ω t√†i li·ªáu..."):
                    raw_text = get_pdf_text(pdf_docs)
                    text_chunks = get_text_chunks(raw_text)
                    get_vector_store(text_chunks)
                    st.success("Ho√†n th√†nh! B·∫°n c√≥ th·ªÉ ƒë·∫∑t c√¢u h·ªèi ngay b√¢y gi·ªù.")
        
        st.markdown("---")
        st.markdown("""
        <div style='text-align: center;'>
            <p>Tr·ª£ l√Ω s·ª≠ d·ª•ng m√¥ h√¨nh Gemini 1.5 Pro</p>
        </div>
        """, unsafe_allow_html=True)
    
    # Container ch√≠nh cho chat
    chat_container = st.container()
    
    # Kh·ªüi t·∫°o l·ªãch s·ª≠ chat n·∫øu ch∆∞a c√≥
    if "messages" not in st.session_state:
        st.session_state.messages = []
    
    # Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
    for message in st.session_state.messages:
        with chat_container:
            if message["role"] == "user":
                st.markdown(f"""
                <div style='background-color: #EAEAEA; padding: 10px; border-radius: 10px; margin-bottom: 10px;'>
                    <p><strong>B·∫°n:</strong> {message["content"]}</p>
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown(f"""
                <div style='background-color: #E3F2FD; padding: 10px; border-radius: 10px; margin-bottom: 10px;'>
                    <p><strong>Tr·ª£ l√Ω:</strong> {message["content"]}</p>
                </div>
                """, unsafe_allow_html=True)
    
    # Ph·∫ßn nh·∫≠p c√¢u h·ªèi
    user_question = st.text_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n ·ªü ƒë√¢y...", key="question_input")
    
    if st.button("G·ª≠i"):
        if not user_question:
            st.warning("Vui l√≤ng nh·∫≠p c√¢u h·ªèi!")
        else:
            try:
                # Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠
                st.session_state.messages.append({"role": "user", "content": user_question})
                
                # Ki·ªÉm tra xem ƒë√£ x·ª≠ l√Ω t√†i li·ªáu ch∆∞a
                try:
                    with st.spinner("ƒêang t√¨m c√¢u tr·∫£ l·ªùi..."):
                        response = user_input(user_question)
                        
                        # Th√™m c√¢u tr·∫£ l·ªùi v√†o l·ªãch s·ª≠
                        st.session_state.messages.append({"role": "assistant", "content": response})
                        
                        # L√†m m·ªõi trang ƒë·ªÉ hi·ªÉn th·ªã tin nh·∫Øn m·ªõi
                        st.experimental_rerun()
                except Exception:
                    st.error("Vui l√≤ng t·∫£i l√™n v√† x·ª≠ l√Ω t√†i li·ªáu PDF tr∆∞·ªõc khi ƒë·∫∑t c√¢u h·ªèi!")
            except Exception as e:
                st.error(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")

if __name__ == "__main__":
    main()
